HTTP 웹 기본 지식

=====(1) 인터넷 네트워크=====

IP (인터넷 프로토콜)
 - 지정한 IP 주소에 데이터 전달
 - 패킷(Packet)이라는 통신 단위로 데이터 전달
  > IP 패킷 정보(출발지 IP, 목적지 IP, 전송 데이터 등...)
 - 한계
  > 비연결성 : 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송
  > 비신뢰성 : 중간에 패킷이 사라지거나 패킷이 순서대로 오지 않는 경우 존재
  > 프로그램 구분 : 같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상인 경우 존재
  >> 이러한 한계를 극복한 것이 TCP

프로토콜 계층
 1. 프로그램이 메세지 생성
 2. SOCKET 라이브러리를 통해 전달
 3. TCP 정보 생성, 메세지 데이터 포함
  - 출발지 PORT, 목적지 PORT, 전송 제어, 순서, 검증 정보 등...
 4. IP 패킷 생성, TCP 데이터 포함
 5. LAN 카드를 통해 전달

TCP (전송 제어 프로토콜)
 - 연결지향 - TCP 3 way handshake (가상연결, 수신 대상이 없다면 미리 파악)
 - 데이터 전달 보증 (중간에 누락된 메세지 알 수 있음)
 - 순서 보장
 >> 신뢰할 수 있는 프로토콜, 현재 대부분 TCP 사용

TCP 3 way handshake
 1. 클라이언트에서 서버로 SYN(접속 요청) 메세지 보냄
 2. 서버로부터 ACK(요청 수락) 메세지 받음
 3. 클라이언트가 ACK(데이터를 함께 보낼 수 있음) 메세지 보냄
 4. 데이터 전송(3.에서 최적화하여 같이 보내는 추세)
데이터 전달 보증
 1. 클라이언트에서 서버로 데이터 전송
 2. 서버로부터 데이터 잘 받았다는 응답을 받음
순서 보장
 1. 패킷1, 패킷2, 패킷3 순서로 전송
 2. 서버가 패킷1, 패킷3, 패킷2 순서로 받음
 3. 서버로부터 패킷2부터 다시 보내라는 응답을 받음
>>이러한 과정은 TCP 정보를 통해 가능해짐

UDP (사용자 데이터그램 프로토콜)
 - IP 위의 TCP와 같은 계층
 - 기능이 거의 없음 (연결지향 X, 데이터 전달 보증 X, 순서 보장X)
 - 데이터 전달 및 순서가 보장되지 않지만 단순하고 빠름
 >> IP와 거의 같은 기능(+PORT, 체크섬 정도), 애플리케이션에서 추가 작업 필요
 >> 애플리케이션 최적화를 위해 TCP를 기본으로 쓰고 UDP와 애플리케이션의 추가 기능을 넣을 수 있음

PORT
 - TCP 데이터에 담겨 같은 IP 내에서 프로세스 구분
 - 0~65535 할당 가능
 - 0~1023 : 잘 알려진 포트, 사용하지 않는 것이 좋음
  > FTP - 20,21
  > TELNET - 23
  > HTTP - 80
  > HTTPS - 443

DNS (도메인 네임 시스템)
 - 전화번호부
 - 도메인 명을 IP 주소로 변환
  ex) google.com(200.200.200.2), aaa.com(210.210.210.3)
 1. DNS 서버에 google.com 등의 도메인 명을 보냄
 2. DNS 서버로부터 도메인 명에 대한 IP 주소를 받음
 3. 받은 IP 주소로 서버에 접속

=====(2) URI와 웹 브라우저 요청 흐름=====

URI (Uniform Resource Identifier)
 - 리소스를 식별하는 가장 큰 개념
 - URL(리소스 위치)와 URN(리소스 이름)을 포괄하는 개념, ( URI ( URL )( URN ) )
  > URL은 ~~~.com의 형식으로 적는 것
  > URN은 이름을 부여하는 것, 찾기 힘들기 때문에 URL을 사용
 - 뜻
  > Uniform : 리소스를 식별하는 통일된 방식
  > Resource : 자원, URI로 식별할 수 있는 모든 것(제한 없음)
  > Identifier : 다른 항목과 구분하는데 필요한 정보
  >> 앞으로의 강의에서 URI를 URL과 같은 의미로 이야기함

URL 전체 문법
 - scheme://[userinfo@]host[:port][/path][?query][#fragment]
  > scheme : 주로 프로토콜(자원 접근 방식 규칙) 사용
  > [userinfo@] : URL에 사용자 정보를 포함하는 경우, 잘 사용하지 않음
  > host : 호스트명, 도메인명, IP 주소 직접 입력
  > [:port] : 접속 포트
  > [/path] : 리소스 경로, 계층적 구조
  > [?query] : key=value형태, ?로 시작해 &로 추가(ex) ?keyA=valueA&keyB=valueB)
  > [#fragment] : html 내부 북마크 등에 사용, 서버에 전송하는 정보는 아님

웹 브라우저 요청 흐름
 1. host를 통해 DNS 서버 조회, IP, PORT 정보 받음
 2. 웹 브라우저가 HTTP 메세지 생성
 3. SOCKET 라이브러리를 통해 전달
  - A : TCP/IP 연결(IP, PORT)
  - B : 데이터 전달
 4. TCP/IP 패킷 생성, HTTP 메세지 포함
 5. 목적지에 도착하면 HTTP 메세지만 받아 분석
 6. HTTP 응답 메세지를 만들어 응답 패킷에 넣어 반환

=====(3) HTTP 기본=====

HTTP
 - 모든 것이 HTTP, HTTP 메세지에 모든 것을 전송
  > HTML, TEXT, IMAGE, 영상, XML,... 거의 모든 형태의 데이터 전송 가능
 - 기반 프로토콜
  > TCP : HTTP/1.1, HTTP/2
  > UDP : HTTP/3

HTTP 특징
 - 클라이언트 서버 구조
 - 무상태 프로토콜(Stateless)
 - 비연결성
 - HTTP 메세지
 - 단순함, 확장 가능

클라이언트 서버 구조
 - Request Response 구조
  1. 클라이언트가 서버에 요청을 보내고 응답 대기
  2. 서버가 요청에 대한 결과를 만들어 응답
  >> 클라이언트와 서버가 독립적으로 진화할 수 있다는 장점이 있음

무상태 프로토콜(Stateless)
 - 서버가 클라이언트의 상태를 보존 X
  > 무상태는 응답 서버를 쉽게 바꿀 수 있음 >> 무한한 서버 증설 가능
    > 스케일 아웃 - 수평 확장에 유리
  > 로그인과 같은 서비스는 상태를 서버에 유지해야 함
    > 일반적으로 브라우저 쿠키와 서버 세션 등을 사용해 상태 유지

비연결성(Connectionless)
 - HTTP는 기본적으로 연결을 유지하지 않는 모델
 - 일반적으로 초 단위 이하의 빠른 속도로 응답
 - 1시간 동안 수천명이 서비스를 사용해도 실제 서버에서 처리하는 요청은 수십개 이하로 매우 적음
 - 요청과 응답 후 연결을 끊음, 서버는 연결을 유지하지 않고 최소한의 자원 유지
  > 서버 자원을 효율적으로 사용
 - 한계
  > TCP/IP 연결을 매번 새로 맺어야 하므로 3 way handshake 시간 추가
  > 웹 브라우저로 사이트를 요청하면 HTML, js, css, 이미지 등의 자원이 함께 다운로드
 - 극복
  > HTTP 지속 연결(Persistent Connections)로 문제 해결
    > 요청 내용들을 응답받고 매번 종료하는 것이 아닌 모든 요청, 응답 끝난 후 종료
  > HTTP/2, HTTP/3에서 더욱 최적화됨

HTTP 메세지 구조
 1. start-line	 ex) GET /search?q=hello&hl=ko HTTP/1.1
 2. header		 ex) Host: www.google.com
 3. empty line(CRLF) ex) 공백
 4. message body	 ex) <html>~~~

Start-line
 - request-line과 status-line으로 구분
  > request-line(요청 메세지) = method SP(공백) request-target SP(공백) HTTP-version CRLF(엔터)
  > HTTP 메서드(GET:리소스 조회, POST:오청 내역 처리, PUT 등...)
  > 요청 대상 : 절대경로로 시작
  > HTTP 버전
   >> 등으로 요청 메세지가 구성됨
  > status-line(응답 메세지) = HTTP-version SP status-code SP reason-phrase CRLF
  > HTTP 버전
  > HTTP 상태 코드 : 성공, 실패를 나타냄 ex) 200:성공, 400:클라이언트 요청 오류, 500:서버 내부 오류
  > 이유 문구 : 사람이 이해할 수 있는 짧은 상태 코드 설명 글

HTTP 헤더
 - header-field = field-name ":" OWS field-value OWS (OWS:띄어쓰기 허용)
 - 용도 : HTTP 전송에 필요한 모든 부가정보 포함 ex) 메세지 바디 내용, 크기, 인증, 캐시 관리 등
 - 메세지 바디 : 실제 전송할 데이터 ex) HTML 문서, 이미지, 영상, JSON 등

=====(4) HTTP 메서드=====

URI 설계의 가장 중요한 것은 " 리소스 식별 "
 - 예를들어 회원의 등록, 수정, 조회 각각이 리소스가 아닌 회원 자체가 리소스
  > 회원이라는 리소스만 식별하면 됨 >> 회원 리소스를 URI에 매핑
  > URI는 리소스만 식별, 리소스와 행위를 분리해야 함
     ex)	리소스 : 회원
	행위 : 조회, 등록, 삭제, 변경
	>> 리소스는 명사, 행위는 동사, 행위는 어떻게 구분하는가?

주요 HTTP 메서드
 - GET : 리소스 조회
 - POST : 요정 데이터 처리, 주로 등록
 - PUT : 리소스 대체, 없으면 생성
 - PATCH : 리소스 부분 변경
 - DELETE : 리소스 삭제

 - HEAD : GET과 동일하나 메세지를 제외하고 상태줄과 헤더만 반환
 - OPTIONS : 리소스에 대한 통신 가능 옵션 설명

GET
 - 리소스 조회
 ex)	GET /search?q=hello&hl=ko HTTP/1.1
	HOST: www.google.com
	>> URL의 자원을 달라는 메서드
 - 서버에 전달하고 싶은 데이터는 query를 통해 전달

POST
 - 메세지 바디를 통해 서버로 요청 데이터 전달
 ex)	POST /members HTTP/1.1
	Content-Type: application/json
	{
	  "username": "hello",
	  "age": 20
	}
	>> 서버가 /members에 전달된 데이터를 저장
	     신규 리소스 식별자(ex) /members/100) 생성
	     응답 데이터를 클라이언트로 전송 ( HTTP/1.1 201 Created ~~~)
 - 다양한 기능
  > HTML 양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공
  > 게시판, 뉴스 그룹, 메일링, 리스트 등에 메세지 게시
  > 서버가 아직 식별하지 않은 새 리소스 생성 (ex) 신규 주문 생성)
  > 기존 자원에 대한 데이터 추가
 - 정리
  1. 새 리소스 생성
  2. 요청 데이터 처리 (단순 데이터 생성, 변경을 넘어 프로세스 처리의 경우도 POST가 담당)
  3. 다른 메서드로 처리하기 애매한 경우

PUT
 - 리소스를 대체, 없으면 생성, 쉽게 말해 덮어버리는 것
 - 클라이언트가 리소스 식별 (클라이언트가 리소스 위치를 알고 URI 지정)
  ex) PUT /members/100 HTTP/1.1, 클라이언트가 100번에 집어넣을 것을 지정
  > POST와 차이점
 - 주의점 : 리소스를 완전히 대체, 일부 필드 없이 PUT 하는 경우 그 필드는 삭제될 수 있음

PATCH
 - 리소스를 부분 변경
 - PUT에서의 주의점을 해결한 메서드

DELETE
 - 리소스 제거
 ex)	DELETE /members/100 HTTP/1.1

HTTP 메서드 속성
 - 안전(Safe) : 호출해도 리소스를 변경하지 않음 ex) GET
 - 멱등(Idempotent) : 몇 번 호출해도 결과가 같음 ex) GET, PUT, DELETE
  > GET : 몇 번 조회해도 같은 결과 조회
  > PUT : 결과를 대체, 같은 요청을 여러번 해도 결과는 같음
  > DELETE : 결과를 삭제, 같은 요청을 여러번 해도 삭제된 결과는 같음
  > [ POST ] : 멱등이 아님, 두 번 호출하면 같은 결제가 중복 발생할 수 있음
  > 활용 : 자동 복구 매커니즘, 서버가 정상 응답을 못 주면 같은 요청을 또 해도 되는가의 판단 근거
 - 캐시가능(Cacheable) : 응답 결과 리소스를 캐시해서 사용해도 되는가?
  > GET, HEAD, POST, PATCH 캐시가능

=====(5) HTTP 메서드 활용=====

클라이언트에서 서버로 데이터 전송 방식은 크게 2가지
 - 쿼리 파라미터를 통한 데이터 전송
  > GET, 정렬 필터(검색어)
 - 메세지 바디를 통한 데이터 전송
  > POST, PUT, PATCH (회원가입, 상품주문, 리소스등록, 리소스변경 등)

클라이언트에서 서버로 데이터를 전송하는 4가지 상황을 예시로 가정
 - 정적 데이터 조회 (이미지, 정적 텍스트 문서)
 - 동적 데이터 조회 (검색, 게시판 목록 정렬 필터)
 - HTML Form을 통한 데이터 전송 (회원가입, 상품주문, 데이터변경)
 - HTTP API를 통한 데이터 전송 (회원가입, 상품주문, 데이터변경, 서버 to 서버, 앱 웹 클라이언트)

정적 데이터 조회
 - 쿼리 파라미터 미사용
 ex) GET/static/star.jpg HTTP/1.1
     Host: localhost:8080
 - 이미지, 정적 텍스트 문서 등
 - 조회는 GET 사용
 - 정적 데이터는 일반적 쿼리 파라미터 없이 리소스 경로로 단순하게 조회 가능

동적 데이터 조회
 - 쿼리 파라미터 사용
 ex) GET /search?q=hello&hl=ko HTTP/1.1
     Host: www.google.com
 - 쿼리 파라미터를 기반으로 정렬 필터하여 결과를 동적으로 생성
 - 주로 검색, 게시판 목록에서 정렬 필터 등
 - 조회는 GET 사용
 - GET은 쿼리 파라미터를 사용하여 데이터 전달

HTML Form 데이터 전송
 - POST 전송 및 저장
 ex) <form action="/save" method="post">
      <input type="text" name="username" />
      <button type="summit">전송</button>
     </form>
     이름을 적고 전송버튼을 누르면 웹 브라우저가 데이터를 읽어 HTTP 메세지를 아래와 같이 생성해줌
     ====================================
     POST /save HTTP/1.1 
     Host: localhost:8080
     Content-Type: application/x-www-form-urlencoded

     username=kim
     ====================================
     서버에 들어오면 데이터를 저장
 - 위 예시의 메서드를 get으로 바꾸면 GET/save?username=kim HTTP/1.1이 됨
 - multipart/form-data
  > 메서드 뒤에 enctype="multipart/form-data"를 붙이면 파일도 같이 전송할 수 있음

HTTP API 데이터 전송
 - 애플리케이션에서 클라이언트에서 서버로 바로 데이터 전송
 ex) POST /members HTTP/1.1
     Content-Type: application/json

     {
       "username": "young",
     }
 - 백엔드 시스템 통신, 앱 웹 클라이언트 전송

API 설계, 회원 관리 시스템
 - API 설계 - POST 기반 등록
  > 회원 목록 /members -> GET
  > 회원 등록 /members -> POST
  > 회원 조회 /members/{id} -> GET
  > 회원 수정 /members/{id} -> PATCH, PUT, POST
  > 회원 삭제 /members/{id} -> DELETE
  >> 클라이언트는 리소스 URI를 모름(/members -> POST), 서버가 리소스 URI를 생성

API 설계, 파일 관리 시스템
 - API 설계 - PUT 기반 등록
  > 파일 목록 /files -> GET
  > 파일 조회 /files/{filename} -> GET
  > 파일 등록 /files/{filename} -> PUT >> 클라이언트가 파일 이름을 앎, PUT
  > 파일 삭제 /files/{filename} -> DELETE
  > 파일 대량 등록 /files -> POST >> 등록에 PUT을 쓰므로 POST의 의미를 임의로 정할 수 있음
  >> 클라이언트가 리소스 URI를 알고 있어야 함, 클라이언트가 직접 리소스 URI 지정

POST, PUT 중 POST 기반을 주로 사용

HTML FORM 사용
 - GET, POST만 지원
  > 회원 목록 /members -> GET
  > 회원 등록 폼 /members/new -> GET >> 저장 버튼을 누르면 POST로 넘어감
  > 회원 등록 /members/new or /members -> POST
  > 회원 조회 /members/{id} -> GET
  > 회원 수정 폼 /members/{id}/edit -> GET >> 수정 버튼을 누르면 POST로 넘어감
  > 회원 수정 /members/{id}/edit or /members/{id} -> POST
  > 회원 삭제 /members/{id}/delete -> POST
  >> 컨트롤 URI (/new, /edit 등 동사로 된 경로)을 통해 제약을 해결

좋은 URI 설계 개념
 - 문서 (단일 개념 ex) /members/100)
 - 컬렉션 (서버가 관리하는 리소스 디렉터리 ex) /members)
 - 스토어 (클라이언트가 관리하는 자원 저장소 ex) /files)
 - 컨트롤 URI (문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스 실행 ex) /members/{id}/delete)
 1. 리소스만을 가지고 설계
 2. 이후 해결이 안되는 설계에 대해 컨트롤 URI 사용

=====(6) HTTP 상태코드=====

상태코드 : 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능
 - 1xx (Informational) : 요청이 수신되어 처리중
 - 2xx (Successful) : 요청 정상 처리
 - 3xx (Redirection) : 요청을 완료하려면 추가 행동이 필요
 - 4xx (Client Error) : 클라이언트 오류, 잘못된 문법 등으로 서버가 요청을 수행할 수 없음
 - 5xx (Server Error) : 서버 오류, 서버가 정상 처리를 못함

1xx - 요청이 수신되어 처리중, 거의 사용하지 않음

2xx - 성공
 - 200 OK
  > GET 등이 성공하면 응답메세지로 HTTP/1.1 200 OK ~~~ 가 옴
 - 201 Created
  > POST 등에 의해 서버가 리소스를 생성, Location 헤더 필드로 식별
 - 202 Accepted
  > 요청이 접수됐으나 처리가 완료되지 않음 ex) 1시간 뒤에 배치 프로세스가 요청을 처리하는 경우
 - 204 No Content
  > 서버가 요청을 성공적으로 수행했으나 응답 페이로드 본문에 보낼 데이터가 없음 ex)문서 편집기 save

3xx - 리다이렉션(웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면 Location 위치로 이동)
 1. 요청
 2. 301 응답과 바뀐 URI을 Location으로 보냄
 3. 자동 리다이렉트
 4. 바뀜 URI로 요청
 5. 응답

영구 리다이렉션 : 특정 리소스의 URI가 영구적으로 이동 ex) /members -> /users
 - 301 Moved Permanently : 리다이렉스 요청시 메서드가 GET으로 변하고 본문이 제거될 수 있음
 - 308 Permanent Redirect : 301과 기능은 같으나 리다이렉트시 본문 유지(요청 메서드 변경 X)
 - ex)	================================================
	POST /event HTTP/1.1 ~~ name=hello&age=20
	================================================
	>>보내면 301 Moved Permanently와 Location, 메서드가 GET으로 변함

	================================================
	GET /new-event ~~ 메세지(key=value 형태)는 지워짐
	================================================
	이 때 308을 쓰면 메세지가 유지됨, 잘 쓰지 않음

일시 리다이렉션 : 리소스 URI가 일시적으로 변경 ex) 주문 완료 후 주문 내역 화면으로 이동
 - 302 Found : 리다이렉트시 요청 메서드가 GET으로 변하고 본문이 제거될 수 있음
 - 307 Temporary Redirect : 302와 기능은 같으나 리다이렉트시 본문 유지(요청 메서드 변경 X)
 - 303 See Other : 302와 기능은 같으나 리다이렉트시 요청 메서드가 GET으로 변경
 - ex)	POST로 주문 후 웹 브라우저를 새로고침 하면? 새로고침은 다시 요청, 중복 주문 가능성
	================================================
	POST /order HTTP/1.1 ~~ itemId=mouse&count=1
	================================================
	>>결과 화면에서 새로고침하면 POST요청이 다시 들어와 주문이 한번 더 저장될 수 있음, 문제
 - PRG: Post/Redirect/Get
  > POST로 주문 후 새로고침으로 인한 주문 방지
  > POST로 주문 후 결과 화면을 GET 메서드로 리다이렉트
  > 새로고침해도 결과 화면을 GET으로 조회
  > 중복 주문 대신 결과 화면만 GET으로 다시 요청
  > ex)	위 예시의 POST 요청의 응답으로 302 Found, Location: /order-result/19 메세지를 반환
	자동 리다이렉트로 POST가 아닌 GET /order-result/19 HTTP/1.1이 요청됨, key=value는 사라짐
	>> PRG 이후 리다이렉트하면 URL은 이미 POST >> GET, 결과 화면만 조회하고 중복 주문 X
 - 정리
  > 현실적으로 많은 애플리케이션 라이브러리는 302를 기본값으로 함

기타 리다이렉션 : 결과 대신 캐시 사용
 - 300 Multiple Choices : 안씀
 - 304 Not Modified : 캐시를 목적으로 사용
  > 클라이언트에게 리소스가 수정되지 않았음을 알려줌, 클라이언트는 로컬PC에 저장된 캐시를 재사용
  > 즉, 캐시로 리다이렉트
  > 로컬 캐시를 사용해야 하므로 메세지 바디가 있으면 안됨

4xx - 클라이언트 오류, 오류의 원인이 클라이언트에 있음, 이미 잘못된 요청을 보내므로 재시도 가능성 X
 - 400 Bad Request : 요청 구문, 메세지 등 오류 ex) 요청 파라미터가 잘못됨, API 스펙이 맞지 않음
 - 401 Unauthorized : 인증되지 않음, 응답에 WWW-Authenticate 헤더와 인증 방법을 설명해야 함
  > 인증(Authentication) : 본인이 누구인지 확인(로그인)
  > 인가(Authorization) : 권한부여(ADMIN처럼 특정 리소스에 접근할 권한이 있는지)
 - 403 Forbidden : 서버가 요청을 이해했으나 승인을 거부 ex) 어드민이 아닌 사람이 리소스 접근
 - 404 Not Found : 요청 리소스를 찾을 수 없음

5xx - 서버 오류, 오류의 원인이 서버에 있음, 재시도 하면 성공 가능성 O
 - 500 Internal Server Error : 서버 내부 문제, 애매하면 500 오류로 내보냄
 - 503 Service Unavailable : 일시적 과부하, 예정된 작업으로 잠시 요청을 처리할 수 없음
  > Retry-After 헤더 필드 뒤에 복구되는지 보낼 수 있음

=====(7) HTTP 헤더1 - 일반 헤더=====

HTTP 헤더
 - field-name  ":"  OWS  field-value  OWS 로 구성
 - HTTP 전송에 필요한 모든 부가정보 ex) 메세지 바디 내용, 메세지 바디 크기, 캐시관리 정보 등..
 - 분류
  > General 헤더 : 메세지 전체에 적용되는 정보 ex) Connection: close
  > Request 헤더 : 요청 정보 ex) User-Agent: Mozilla/5.0
  > Response 헤더 : 응답 정보 ex) Server: Apache
  > 표현 헤더 : 엔티티 바디 정보 ex) Context-Type: text/html
    >> 메세지 본문은 표현 데이터 전달에 사용, 엔티티 본문의 표현 데이터를 해석할 수 있는 정보를 제공

표현 헤더
 - Content-Type : 표현 데이터의 형식 설명 ex) html, json 등
 - Content-Encoding : 표현 데이터의 압축 방식 ex) gzip, deflate, identity 등
  > 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가
  > 데이터를 읽는 쪽에서 인코딩 헤더 정보로 압축 해제
 - Content_Language : 표현 데이터의 자연 언어 ex) ko, en 등
 - Content-Length : 표현 데이터의 길이, byte 단위

협상 헤더 (Contents Negotiation) : 클라이언트가 선호하는 표현 요청
 - 협상 헤더는 요청 시에만 사용
 - Accept : 클라이언트가 선호하는 미디어 타입 전달
 - Accept-Charset : 클라이언트가 선호하는 문자 인코딩
 - Accept-Encoding : 클라이언트가 선호하는 압축 인코딩
 - Accept-Language : 클라이언트가 선호하는 자연 언어
 - 협상과 우선순위 1 (q)
  > 0~1, 클수록 높은 우선순위, 생략하면 1
  > Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  1. ko-KR; >> 생략했으므로 1
  2. ko >> 0.9
  3. en-US >> 0.8
  4. en >> 0.7
  > 독일어, 영어를 지원하는 사이트에 간다면 보다 우선순위가 높은 영어를 제공
 - 협상과 우선순위 2
  > 구체적인 것이 우선
  > Accept: text/*, text/plain, text/plain;format=flowed, "/"
  1. text/plain;format=flowed
  2. text/plain
  3. text/*
  4. "/"

전송 방식
 - 단순 전송 : Content-Length를 지정하여 길이를 알 때 사용
 - 압축 전송 : 서버에서 압축하여 전송
 - 분할 전송 : Transfer-Encoding: chunked, 메세지를 쪼개서 보낼 수 있음, Content-Length가 없음
  ex)	5	byte임
	Hello
	5
	World
	0
	\r\n
 - 범위 전송 : 요청시 받을 범위를 지정

일반 정보
 - From(요청) : 유저 에이전트의 이메일 정보, 검색 엔진 등의 요청에서 주로 사용
 - Referer(요청) : 이전 웹 페이지의 주소, A->B로 이동하여 B를 요청할 때 Referer: A를 포함하여 요청
 - User-Agent(요청) : 유저 에이전트 애플리케이션 정보, 장애 발생 파악 가능 ex) 웹 브라우저 정보 등
 - Server(응답) : 요청을 처리하는 ORIGIN 서버의 소프트웨어 정보, 응답에 사용 ex) Server: nginx
 - Date(응답) : 메세지가 발생한 날짜와 시간

특별한 정보
 - Host(요청, 필수) : 요청한 호스트 정보
  > 하나의 서버가 여러 도메인을 처리할 때 요청의 목적지를 구분해줌
  ex) GET /hello HTTP/1.1 메세지를 받았을 때 서버가 여러 도메인이 있으면 어떤 도메인인지 하는지 모름
 - Location : 페이지 리다이렉션
  > 웹 브라우저는 3xx 응답 결과에 Location 헤더가 있으면 Location 위치로 자동 이동
  > 201 Location 값은 요청에 의해 생성된 리소스 URI를 의미함
 - Allow : 허용 가능한 HTTP 메서드
  > 제공하지 않는 메서드가 있다면 405(Method Not Allowed) 에서 응답에 Allow: GET, ... 등을 포함
 - Retry-After : 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간을 알려줌
  > 503(Service Unavailable) : 서버가 언제까지 불능인지 알려줌, 서버 점검 등

인증
 - Authorization : 클라이언트 인증 정보를 서버에 전달
 - WWW-Authenticate : 리소스 접근시 필요한 인증 방법 정의
  > 401 Unauthorized 응답과 사용, 어떤 인증이 필요한가를 보여줌
  ex) WWW-Authenticate: Newauth realm="apps", type=1, title="Login to \"apps\""

쿠키
 - Set-Cookie : 서버에서 클라이언트로 쿠키 전달
 - Cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고 HTTP 요청시 서버로 전달
	ex) 쿠키 미사용
	==================
	POST /login HTTP/1.1
	user=홍길동		---->
	==================
					==================
					HTTP/1.1 200 OK
				<----	홍길동님이 로그인 했습니다.
					==================
	==================
	GET /welcome HTTP/1.1	---->
	==================
					==================
					HTTP/1.1 200 OK
				<----	안녕하세요. [ 손님 ] >> Stateless, 연결이 끊어짐
					==================
	> HTTP는 무상태 프로토콜로 응답을 보낸 후 서버는 무상태로 돌아감
	> 모든 요청에 사용자 정보를 보내면? >> 개발 자체가 매우 힘들고 브라우저를 닫으면 없어짐

	ex) 쿠키 사용
	==================
	POST /login HTTP/1.1
	user=홍길동		---->
	==================
					==================
					HTTP/1.1 200 OK
					Set-Cookie: user=홍길동
				<----
					홍길동님이 로그인했습니다.
					==================
	쿠키 저장소에 user=홍길동이 담김
	==================
	GET /welcome HTTP/1.1
	Cookie: user=홍길동	---->
	==================
					==================
					HTTP/1.1 200 OK

					안녕하세요. 홍길동님
					==================
	> 모든 요청에 쿠키 정보를 자동으로 포함, 보안에 문제가 됨
 - sessionId, path, domain, Secure 등을 통해 보안 문제를 해결
  > 사용자 로그인 세션 관리, 광고 정보 트래킹
  > 쿠키 정보는 항상 서버에 전송 >> 네트워크 트래픽 추가 유발
  > 최소한의 정보(세션 id, 인증 토큰)만 사용
  > 주민번호, 신용카드 번호 등 보안에 민감한 데이터는 저장하면 안됨

쿠키 - 생명주기
 - Set-Cookie: expires=Sat, 26-Dec-2020 04:39:21 GMT
  > expires로 만료일을 지정하여 쿠키 삭제
 - Set-Cookie: max-age=3600 (3600초)
  > max-age로 쿠키 삭제 시간을 지정
 - 세션 쿠키 : 만료 날짜를 생략하면 브라우저 종료 시 까지만 유지
 - 영속 쿠키 : 만료 날짜를 입력하면 해당 날짜까지 유지

쿠키 - 도메인
 - 명시 : 명시한 문서 기준 도메인 + 서브 도메인 포함
  ex) domain=example.org : example.org와 dev.example.org도 쿠키 접근
 - 생략 : 현재 문서 기준 도메인만 적용
  ex) example.org에서 쿠키를 생성하고 domain을 지정하지 않으면 dev.example.org는 쿠키 미접근

쿠키 - 경로
 - 경로를 포함한 하위 경로 페이지만 쿠키 접근
 - 일반적으로 path=/ 루트로 지정
 ex) path=/home 지정, /home/level1은 접근 가능하지만 /hello는 접근 불가능

쿠키 - 보안
 - Secure : https인 경우에만 전송
 - HttpOnly : XSS 공격 방지, js 접근 불가, HTTP 전송에만 사용
 - SameSite : XSRF 공격 방지, 요청 도메인과 설정 도메인이 같은 경우만 쿠키 전송

=====(8) HTTP 헤더2 - 캐시와 조건부 요청=====

캐시
 - 기본 동작 :  접근했던 리소스를 브라우저 캐시에 저장해놓고 다시 접근하면 브라우저 캐시에서 찾음
  > 캐시 유효 시간이 초과하면 서버에서 다시 조회하고 캐시를 갱신
  > 이 때 네트워크 다운로드가 다시 발생

캐시 - 검증 헤더 추가
 - 검증 헤더 : 캐시 데이터와 서버 데이터가 같은지 검증하는 데이터
 ex) Last-Modified, ETag
 - 첫 번째 요청 : 데이터가 마지막에 수정된 시간과 함께 요청, 최종 수정일과 리소스를 캐시에 저장
 - 두 번째 요청(캐시 시간 초과) : if-modified-since와 날짜를 붙여 요청
  > 서버가 가진 데이터의 수정일과 요청 날짜를 비교하여 그 사이 변경이 있었는지 감지
  > 변경이 없으면 304 Not Modified와 헤더만 있는 응답 메세지를 보냄 (body 없음)
  > 브라우저 캐시의 데이터를 갱신하여 사용
  >> 용량이 매우 적은 헤더 정보만 다운로드 하면 되기 때문에 부하가 매우 줄어듦

캐시 - 검증 헤더와 조건부 요청
 - If-Modified-Since : Last-Modified와 사용
  > 두 날짜를 비교하여 데이터 미변경시 304 Not Modified(캐시로 redirection), 헤더 데이터만 전송
  > 데이터 변경시 200 OK, 모든 데이터 전송
  > 단점
    > 1초 미만 단위로 캐시 조정 불가
    > 날짜 기반 로직
    > 날짜가 다르지만 수정 결과가 같은 경우 같은 데이터를 또 불러옴
 - If-None-Match : ETag(Entity Tag)와 사용
  > 캐시용 데이터에 임의의 고유 버전 이름을 달아둠 ex) ETag: "v1.0", ETag: "a2jiodwjekjl3"
  > 데이터가 변경되면 버전 이름을 바꾸고 Hash를 다시 생성
  > 단순하게 ETag만 보내고 같으면 유지, 다르면 다시 받기
    > 동작
    1. 서버에서 반환시 ETag: "~~~"를 보내고 이를 브라우저 캐시에 저장
    2. 캐시 시간 초과 시 서버가 가진 데이터의 ETag와 비교
    3. 둘이 같다면 브라우저 캐시의 데이터를 재사용
  > ETag 만드는 법 등은 모두 서버가 담당, 클라이언트는 ETag 비교만 하면 됨



















